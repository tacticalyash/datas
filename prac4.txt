prac 4 assign  -  Linear reg using boston housing dataset



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
df=pd.read_csv("boston .csv")
df.head()
CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX
\
0 0.00632 18.0 2.31 0 0.538 6.575 65.2 4.0900 1 296.0
1 0.02731 0.0 7.07 0 0.469 6.421 78.9 4.9671 2 242.0
2 0.02729 0.0 7.07 0 0.469 7.185 61.1 4.9671 2 242.0
3 0.03237 0.0 2.18 0 0.458 6.998 45.8 6.0622 3 222.0
4 0.06905 0.0 2.18 0 0.458 7.147 54.2 6.0622 3 222.0

PTRATIO B LSTAT MEDV
0 15.3 396.90 4.98 24.0
1 17.8 396.90 9.14 21.6
2 17.8 392.83 4.03 34.7
3 18.7 394.63 2.94 33.4
4 18.7 396.90 5.33 36.2
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 506 entries, 0 to 505
Data columns (total 14 columns):
# Column Non-Null Count Dtype
--- ------ -------------- -----
0 CRIM 506 non-null float64
1 ZN 506 non-null float64
2 INDUS 506 non-null float64
3 CHAS 506 non-null int64
4 NOX 506 non-null float64
5 RM 506 non-null float64
6 AGE 506 non-null float64
7 DIS 506 non-null float64

8 RAD 506 non-null int64
9 TAX 506 non-null float64
10 PTRATIO 506 non-null float64
11 B 506 non-null float64
12 LSTAT 506 non-null float64
13 MEDV 506 non-null float64
dtypes: float64(12), int64(2)
memory usage: 55.5 KB
df.describe()
CRIM ZN INDUS CHAS NOX
RM \
count 506.000000 506.000000 506.000000 506.000000 506.000000
506.000000
mean 3.613524 11.363636 11.136779 0.069170 0.554695
6.284634
std 8.601545 23.322453 6.860353 0.253994 0.115878
0.702617
min 0.006320 0.000000 0.460000 0.000000 0.385000
3.561000
25% 0.082045 0.000000 5.190000 0.000000 0.449000
5.885500
50% 0.256510 0.000000 9.690000 0.000000 0.538000
6.208500
75% 3.677083 12.500000 18.100000 0.000000 0.624000
6.623500
max 88.976200 100.000000 27.740000 1.000000 0.871000
8.780000
AGE DIS RAD TAX PTRATIO
B \
count 506.000000 506.000000 506.000000 506.000000 506.000000
506.000000
mean 68.574901 3.795043 9.549407 408.237154 18.455534
356.674032
std 28.148861 2.105710 8.707259 168.537116 2.164946
91.294864
min 2.900000 1.129600 1.000000 187.000000 12.600000
0.320000
25% 45.025000 2.100175 4.000000 279.000000 17.400000
375.377500
50% 77.500000 3.207450 5.000000 330.000000 19.050000
391.440000
75% 94.075000 5.188425 24.000000 666.000000 20.200000
396.225000
max 100.000000 12.126500 24.000000 711.000000 22.000000
396.900000
LSTAT MEDV

count 506.000000 506.000000
mean 12.653063 22.532806
std 7.141062 9.197104
min 1.730000 5.000000
25% 6.950000 17.025000
50% 11.360000 21.200000
75% 16.955000 25.000000
max 37.970000 50.000000
df.drop('ZN',axis=1,inplace=True)
df.plot.scatter('RM','MEDV')
<AxesSubplot:xlabel='RM', ylabel='MEDV'>

plt.subplots(figsize=(12,8))
sns.heatmap(df.corr(),cmap='RdGy')
<AxesSubplot:>

#NEGATIVE CORRELATION-x is high and y is low or viceversa
sns.pairplot(df,vars=['LSTAT','PTRATIO','INDUS','TAX','CRIM','NOX','RA
D','AGE','MEDV'])
<seaborn.axisgrid.PairGrid at 0x281dcfa0700>

#positive correlation
sns.pairplot(df,vars=['RM','B','DIS','CHAS','MEDV'])
<seaborn.axisgrid.PairGrid at 0x281e1ecdd00>

#TRAINING LINEAR REGRESSION MODEL
X=df[['CRIM','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATI
O','B']]
Y=df['MEDV']
#IMPORT LIBRARY FOR TRAIN AND TESTING OF DATASET
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
#SPLITING TRAINING AND TESTING DATASET
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.4)
#USE LINEAR REGRESSION TO CREATE A MODEL
lm=LinearRegression()
lm.fit(X_train,Y_train)

LinearRegression()
lm.fit(X_train,Y_train)
#PREDICTION FOR ALL VALUES OF TRAIN_X AND TEST_X
Y_train_pred=lm.predict(X_train)
Y_train_pred=lm.predict(X_test)
df=pd.DataFrame(Y_train_pred,Y_train)
df=pd.DataFrame(Y_test_pred,Y_train)
----------------------------------------------------------------------
-----
ValueError Traceback (most recent call
last)
~\AppData\Local\Temp\ipykernel_12504\324359729.py in <module>
----> 1 df=pd.DataFrame(Y_train_pred,Y_train)
2 df=pd.DataFrame(Y_test_pred,Y_train)
~\anaconda3\lib\site-packages\pandas\core\frame.py in __init__(self,
data, index, columns, dtype, copy)
692 )
693 else:
--> 694 mgr = ndarray_to_mgr(
695 data,
696 index,
~\anaconda3\lib\site-packages\pandas\core\internals\construction.py in
ndarray_to_mgr(values, index, columns, dtype, copy, typ)
349 )
350
--> 351 _check_values_indices_shape_match(values, index, columns)
352
353 if typ == "array":
~\anaconda3\lib\site-packages\pandas\core\internals\construction.py in
_check_values_indices_shape_match(values, index, columns)
420 passed = values.shape
421 implied = (len(index), len(columns))
--> 422 raise ValueError(f"Shape of passed values is {passed},
indices imply {implied}")
423
424
ValueError: Shape of passed values is (203, 1), indices imply (303, 1)
predictions=lm.predict(X_test)
plt.scatter(Y_test,predictions)
plt.Xlabel('Y Test')
plt.Ylabel('Predicted Y')

----------------------------------------------------------------------
-----
AttributeError Traceback (most recent call
last)
~\AppData\Local\Temp\ipykernel_12504\1684345468.py in <module>
1 plt.scatter(Y_test,predictions)
----> 2 plt.Xlabel('Y Test')
3 plt.Ylabel('Predicted Y')
AttributeError: module 'matplotlib.pyplot' has no attribute 'Xlabel'

from sklearn.metrics import mean_squared_error,r2_score
mse=mean_squared_error(Y_test,predictions)
print(mse)
34.27679978218395
mse=mean_squared_error(Y_test,predictions)
print(mse)
34.27679978218395